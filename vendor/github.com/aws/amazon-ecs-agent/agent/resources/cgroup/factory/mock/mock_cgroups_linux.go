// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/containerd/cgroups (interfaces: Cgroup)

package mock_cgroups

import (
	cgroups "github.com/containerd/cgroups"
	gomock "github.com/golang/mock/gomock"
	specs_go "github.com/opencontainers/runtime-spec/specs-go"
)

// Mock of Cgroup interface
type MockCgroup struct {
	ctrl     *gomock.Controller
	recorder *_MockCgroupRecorder
}

// Recorder for MockCgroup (not exported)
type _MockCgroupRecorder struct {
	mock *MockCgroup
}

func NewMockCgroup(ctrl *gomock.Controller) *MockCgroup {
	mock := &MockCgroup{ctrl: ctrl}
	mock.recorder = &_MockCgroupRecorder{mock}
	return mock
}

func (_m *MockCgroup) EXPECT() *_MockCgroupRecorder {
	return _m.recorder
}

func (_m *MockCgroup) Add(_param0 cgroups.Process) error {
	ret := _m.ctrl.Call(_m, "Add", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCgroupRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0)
}

func (_m *MockCgroup) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCgroupRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete")
}

func (_m *MockCgroup) Freeze() error {
	ret := _m.ctrl.Call(_m, "Freeze")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCgroupRecorder) Freeze() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Freeze")
}

func (_m *MockCgroup) MoveTo(_param0 cgroups.Cgroup) error {
	ret := _m.ctrl.Call(_m, "MoveTo", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCgroupRecorder) MoveTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveTo", arg0)
}

func (_m *MockCgroup) New(_param0 string, _param1 *specs_go.LinuxResources) (cgroups.Cgroup, error) {
	ret := _m.ctrl.Call(_m, "New", _param0, _param1)
	ret0, _ := ret[0].(cgroups.Cgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCgroupRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "New", arg0, arg1)
}

func (_m *MockCgroup) OOMEventFD() (uintptr, error) {
	ret := _m.ctrl.Call(_m, "OOMEventFD")
	ret0, _ := ret[0].(uintptr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCgroupRecorder) OOMEventFD() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OOMEventFD")
}

func (_m *MockCgroup) Processes(_param0 cgroups.Name, _param1 bool) ([]cgroups.Process, error) {
	ret := _m.ctrl.Call(_m, "Processes", _param0, _param1)
	ret0, _ := ret[0].([]cgroups.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCgroupRecorder) Processes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Processes", arg0, arg1)
}

func (_m *MockCgroup) Stat(_param0 ...cgroups.ErrorHandler) (*cgroups.Stats, error) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Stat", _s...)
	ret0, _ := ret[0].(*cgroups.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCgroupRecorder) Stat(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stat", arg0...)
}

func (_m *MockCgroup) State() cgroups.State {
	ret := _m.ctrl.Call(_m, "State")
	ret0, _ := ret[0].(cgroups.State)
	return ret0
}

func (_mr *_MockCgroupRecorder) State() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "State")
}

func (_m *MockCgroup) Subsystems() []cgroups.Subsystem {
	ret := _m.ctrl.Call(_m, "Subsystems")
	ret0, _ := ret[0].([]cgroups.Subsystem)
	return ret0
}

func (_mr *_MockCgroupRecorder) Subsystems() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subsystems")
}

func (_m *MockCgroup) Thaw() error {
	ret := _m.ctrl.Call(_m, "Thaw")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCgroupRecorder) Thaw() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Thaw")
}

func (_m *MockCgroup) Update(_param0 *specs_go.LinuxResources) error {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCgroupRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}
