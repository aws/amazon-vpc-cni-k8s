// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/containermetadata (interfaces: Manager,DockerMetadataClient)

package mock_containermetadata

import (
	time "time"

	go_dockerclient "github.com/fsouza/go-dockerclient"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) Clean(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Clean", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Clean(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clean", arg0)
}

func (_m *MockManager) Create(_param0 *go_dockerclient.Config, _param1 *go_dockerclient.HostConfig, _param2 string, _param3 string) error {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1, arg2, arg3)
}

func (_m *MockManager) SetContainerInstanceARN(_param0 string) {
	_m.ctrl.Call(_m, "SetContainerInstanceARN", _param0)
}

func (_mr *_MockManagerRecorder) SetContainerInstanceARN(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetContainerInstanceARN", arg0)
}

func (_m *MockManager) Update(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1, arg2)
}

// Mock of DockerMetadataClient interface
type MockDockerMetadataClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDockerMetadataClientRecorder
}

// Recorder for MockDockerMetadataClient (not exported)
type _MockDockerMetadataClientRecorder struct {
	mock *MockDockerMetadataClient
}

func NewMockDockerMetadataClient(ctrl *gomock.Controller) *MockDockerMetadataClient {
	mock := &MockDockerMetadataClient{ctrl: ctrl}
	mock.recorder = &_MockDockerMetadataClientRecorder{mock}
	return mock
}

func (_m *MockDockerMetadataClient) EXPECT() *_MockDockerMetadataClientRecorder {
	return _m.recorder
}

func (_m *MockDockerMetadataClient) InspectContainer(_param0 string, _param1 time.Duration) (*go_dockerclient.Container, error) {
	ret := _m.ctrl.Call(_m, "InspectContainer", _param0, _param1)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerMetadataClientRecorder) InspectContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InspectContainer", arg0, arg1)
}
