// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/containernetworking/cni/libcni (interfaces: CNI)

package mock_libcni

import (
	libcni "github.com/containernetworking/cni/libcni"
	types "github.com/containernetworking/cni/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CNI interface
type MockCNI struct {
	ctrl     *gomock.Controller
	recorder *_MockCNIRecorder
}

// Recorder for MockCNI (not exported)
type _MockCNIRecorder struct {
	mock *MockCNI
}

func NewMockCNI(ctrl *gomock.Controller) *MockCNI {
	mock := &MockCNI{ctrl: ctrl}
	mock.recorder = &_MockCNIRecorder{mock}
	return mock
}

func (_m *MockCNI) EXPECT() *_MockCNIRecorder {
	return _m.recorder
}

func (_m *MockCNI) AddNetwork(_param0 *libcni.NetworkConfig, _param1 *libcni.RuntimeConf) (types.Result, error) {
	ret := _m.ctrl.Call(_m, "AddNetwork", _param0, _param1)
	ret0, _ := ret[0].(types.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCNIRecorder) AddNetwork(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNetwork", arg0, arg1)
}

func (_m *MockCNI) AddNetworkList(_param0 *libcni.NetworkConfigList, _param1 *libcni.RuntimeConf) (types.Result, error) {
	ret := _m.ctrl.Call(_m, "AddNetworkList", _param0, _param1)
	ret0, _ := ret[0].(types.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCNIRecorder) AddNetworkList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNetworkList", arg0, arg1)
}

func (_m *MockCNI) DelNetwork(_param0 *libcni.NetworkConfig, _param1 *libcni.RuntimeConf) error {
	ret := _m.ctrl.Call(_m, "DelNetwork", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCNIRecorder) DelNetwork(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DelNetwork", arg0, arg1)
}

func (_m *MockCNI) DelNetworkList(_param0 *libcni.NetworkConfigList, _param1 *libcni.RuntimeConf) error {
	ret := _m.ctrl.Call(_m, "DelNetworkList", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCNIRecorder) DelNetworkList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DelNetworkList", arg0, arg1)
}
