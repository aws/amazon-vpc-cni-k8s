// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/ecscni (interfaces: CNIClient)

package mock_ecscni

import (
	ecscni "github.com/aws/amazon-ecs-agent/agent/ecscni"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CNIClient interface
type MockCNIClient struct {
	ctrl     *gomock.Controller
	recorder *_MockCNIClientRecorder
}

// Recorder for MockCNIClient (not exported)
type _MockCNIClientRecorder struct {
	mock *MockCNIClient
}

func NewMockCNIClient(ctrl *gomock.Controller) *MockCNIClient {
	mock := &MockCNIClient{ctrl: ctrl}
	mock.recorder = &_MockCNIClientRecorder{mock}
	return mock
}

func (_m *MockCNIClient) EXPECT() *_MockCNIClientRecorder {
	return _m.recorder
}

func (_m *MockCNIClient) Capabilities(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Capabilities", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCNIClientRecorder) Capabilities(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Capabilities", arg0)
}

func (_m *MockCNIClient) CleanupNS(_param0 *ecscni.Config) error {
	ret := _m.ctrl.Call(_m, "CleanupNS", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCNIClientRecorder) CleanupNS(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CleanupNS", arg0)
}

func (_m *MockCNIClient) ReleaseIPResource(_param0 *ecscni.Config) error {
	ret := _m.ctrl.Call(_m, "ReleaseIPResource", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCNIClientRecorder) ReleaseIPResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReleaseIPResource", arg0)
}

func (_m *MockCNIClient) SetupNS(_param0 *ecscni.Config) error {
	ret := _m.ctrl.Call(_m, "SetupNS", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCNIClientRecorder) SetupNS(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetupNS", arg0)
}

func (_m *MockCNIClient) Version(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "Version", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCNIClientRecorder) Version(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version", arg0)
}
