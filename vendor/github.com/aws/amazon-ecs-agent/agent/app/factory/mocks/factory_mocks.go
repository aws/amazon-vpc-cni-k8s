// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/app/factory (interfaces: StateManager,SaveableOption)

package mock_factory

import (
	config "github.com/aws/amazon-ecs-agent/agent/config"
	statemanager "github.com/aws/amazon-ecs-agent/agent/statemanager"
	gomock "github.com/golang/mock/gomock"
)

// Mock of StateManager interface
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *_MockStateManagerRecorder
}

// Recorder for MockStateManager (not exported)
type _MockStateManagerRecorder struct {
	mock *MockStateManager
}

func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &_MockStateManagerRecorder{mock}
	return mock
}

func (_m *MockStateManager) EXPECT() *_MockStateManagerRecorder {
	return _m.recorder
}

func (_m *MockStateManager) NewStateManager(_param0 *config.Config, _param1 ...statemanager.Option) (statemanager.StateManager, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NewStateManager", _s...)
	ret0, _ := ret[0].(statemanager.StateManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStateManagerRecorder) NewStateManager(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewStateManager", _s...)
}

// Mock of SaveableOption interface
type MockSaveableOption struct {
	ctrl     *gomock.Controller
	recorder *_MockSaveableOptionRecorder
}

// Recorder for MockSaveableOption (not exported)
type _MockSaveableOptionRecorder struct {
	mock *MockSaveableOption
}

func NewMockSaveableOption(ctrl *gomock.Controller) *MockSaveableOption {
	mock := &MockSaveableOption{ctrl: ctrl}
	mock.recorder = &_MockSaveableOptionRecorder{mock}
	return mock
}

func (_m *MockSaveableOption) EXPECT() *_MockSaveableOptionRecorder {
	return _m.recorder
}

func (_m *MockSaveableOption) AddSaveable(_param0 string, _param1 statemanager.Saveable) statemanager.Option {
	ret := _m.ctrl.Call(_m, "AddSaveable", _param0, _param1)
	ret0, _ := ret[0].(statemanager.Option)
	return ret0
}

func (_mr *_MockSaveableOptionRecorder) AddSaveable(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddSaveable", arg0, arg1)
}
