// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/credentials (interfaces: Manager)

package mock_credentials

import (
	credentials "github.com/aws/amazon-ecs-agent/agent/credentials"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) GetTaskCredentials(_param0 string) (credentials.TaskIAMRoleCredentials, bool) {
	ret := _m.ctrl.Call(_m, "GetTaskCredentials", _param0)
	ret0, _ := ret[0].(credentials.TaskIAMRoleCredentials)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetTaskCredentials(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTaskCredentials", arg0)
}

func (_m *MockManager) RemoveCredentials(_param0 string) {
	_m.ctrl.Call(_m, "RemoveCredentials", _param0)
}

func (_mr *_MockManagerRecorder) RemoveCredentials(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveCredentials", arg0)
}

func (_m *MockManager) SetTaskCredentials(_param0 credentials.TaskIAMRoleCredentials) error {
	ret := _m.ctrl.Call(_m, "SetTaskCredentials", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) SetTaskCredentials(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTaskCredentials", arg0)
}
