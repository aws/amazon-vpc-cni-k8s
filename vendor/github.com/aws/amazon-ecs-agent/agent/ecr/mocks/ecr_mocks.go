// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/ecr (interfaces: ECRSDK,ECRFactory,ECRClient)

package mock_ecr

import (
	api "github.com/aws/amazon-ecs-agent/agent/api"
	ecr "github.com/aws/amazon-ecs-agent/agent/ecr"
	ecr0 "github.com/aws/amazon-ecs-agent/agent/ecr/model/ecr"
	gomock "github.com/golang/mock/gomock"
)

// Mock of ECRSDK interface
type MockECRSDK struct {
	ctrl     *gomock.Controller
	recorder *_MockECRSDKRecorder
}

// Recorder for MockECRSDK (not exported)
type _MockECRSDKRecorder struct {
	mock *MockECRSDK
}

func NewMockECRSDK(ctrl *gomock.Controller) *MockECRSDK {
	mock := &MockECRSDK{ctrl: ctrl}
	mock.recorder = &_MockECRSDKRecorder{mock}
	return mock
}

func (_m *MockECRSDK) EXPECT() *_MockECRSDKRecorder {
	return _m.recorder
}

func (_m *MockECRSDK) GetAuthorizationToken(_param0 *ecr0.GetAuthorizationTokenInput) (*ecr0.GetAuthorizationTokenOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAuthorizationToken", _param0)
	ret0, _ := ret[0].(*ecr0.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockECRSDKRecorder) GetAuthorizationToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthorizationToken", arg0)
}

// Mock of ECRFactory interface
type MockECRFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockECRFactoryRecorder
}

// Recorder for MockECRFactory (not exported)
type _MockECRFactoryRecorder struct {
	mock *MockECRFactory
}

func NewMockECRFactory(ctrl *gomock.Controller) *MockECRFactory {
	mock := &MockECRFactory{ctrl: ctrl}
	mock.recorder = &_MockECRFactoryRecorder{mock}
	return mock
}

func (_m *MockECRFactory) EXPECT() *_MockECRFactoryRecorder {
	return _m.recorder
}

func (_m *MockECRFactory) GetClient(_param0 *api.ECRAuthData) (ecr.ECRClient, error) {
	ret := _m.ctrl.Call(_m, "GetClient", _param0)
	ret0, _ := ret[0].(ecr.ECRClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockECRFactoryRecorder) GetClient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetClient", arg0)
}

// Mock of ECRClient interface
type MockECRClient struct {
	ctrl     *gomock.Controller
	recorder *_MockECRClientRecorder
}

// Recorder for MockECRClient (not exported)
type _MockECRClientRecorder struct {
	mock *MockECRClient
}

func NewMockECRClient(ctrl *gomock.Controller) *MockECRClient {
	mock := &MockECRClient{ctrl: ctrl}
	mock.recorder = &_MockECRClientRecorder{mock}
	return mock
}

func (_m *MockECRClient) EXPECT() *_MockECRClientRecorder {
	return _m.recorder
}

func (_m *MockECRClient) GetAuthorizationToken(_param0 string) (*ecr0.AuthorizationData, error) {
	ret := _m.ctrl.Call(_m, "GetAuthorizationToken", _param0)
	ret0, _ := ret[0].(*ecr0.AuthorizationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockECRClientRecorder) GetAuthorizationToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthorizationToken", arg0)
}
