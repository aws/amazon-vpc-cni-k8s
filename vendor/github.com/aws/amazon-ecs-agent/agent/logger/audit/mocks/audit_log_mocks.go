// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/logger/audit (interfaces: AuditLogger,InfoLogger)

package mock_audit

import (
	request "github.com/aws/amazon-ecs-agent/agent/logger/audit/request"
	gomock "github.com/golang/mock/gomock"
)

// Mock of AuditLogger interface
type MockAuditLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockAuditLoggerRecorder
}

// Recorder for MockAuditLogger (not exported)
type _MockAuditLoggerRecorder struct {
	mock *MockAuditLogger
}

func NewMockAuditLogger(ctrl *gomock.Controller) *MockAuditLogger {
	mock := &MockAuditLogger{ctrl: ctrl}
	mock.recorder = &_MockAuditLoggerRecorder{mock}
	return mock
}

func (_m *MockAuditLogger) EXPECT() *_MockAuditLoggerRecorder {
	return _m.recorder
}

func (_m *MockAuditLogger) GetCluster() string {
	ret := _m.ctrl.Call(_m, "GetCluster")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAuditLoggerRecorder) GetCluster() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCluster")
}

func (_m *MockAuditLogger) GetContainerInstanceArn() string {
	ret := _m.ctrl.Call(_m, "GetContainerInstanceArn")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAuditLoggerRecorder) GetContainerInstanceArn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContainerInstanceArn")
}

func (_m *MockAuditLogger) Log(_param0 request.LogRequest, _param1 int, _param2 string) {
	_m.ctrl.Call(_m, "Log", _param0, _param1, _param2)
}

func (_mr *_MockAuditLoggerRecorder) Log(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Log", arg0, arg1, arg2)
}

// Mock of InfoLogger interface
type MockInfoLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockInfoLoggerRecorder
}

// Recorder for MockInfoLogger (not exported)
type _MockInfoLoggerRecorder struct {
	mock *MockInfoLogger
}

func NewMockInfoLogger(ctrl *gomock.Controller) *MockInfoLogger {
	mock := &MockInfoLogger{ctrl: ctrl}
	mock.recorder = &_MockInfoLoggerRecorder{mock}
	return mock
}

func (_m *MockInfoLogger) EXPECT() *_MockInfoLoggerRecorder {
	return _m.recorder
}

func (_m *MockInfoLogger) Info(_param0 ...interface{}) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Info", _s...)
}

func (_mr *_MockInfoLoggerRecorder) Info(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Info", arg0...)
}
