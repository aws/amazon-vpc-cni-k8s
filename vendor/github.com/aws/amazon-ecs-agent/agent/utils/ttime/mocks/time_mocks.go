// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/utils/ttime (interfaces: Time,Timer)

package mock_ttime

import (
	time "time"

	ttime "github.com/aws/amazon-ecs-agent/agent/utils/ttime"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Time interface
type MockTime struct {
	ctrl     *gomock.Controller
	recorder *_MockTimeRecorder
}

// Recorder for MockTime (not exported)
type _MockTimeRecorder struct {
	mock *MockTime
}

func NewMockTime(ctrl *gomock.Controller) *MockTime {
	mock := &MockTime{ctrl: ctrl}
	mock.recorder = &_MockTimeRecorder{mock}
	return mock
}

func (_m *MockTime) EXPECT() *_MockTimeRecorder {
	return _m.recorder
}

func (_m *MockTime) After(_param0 time.Duration) <-chan time.Time {
	ret := _m.ctrl.Call(_m, "After", _param0)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

func (_mr *_MockTimeRecorder) After(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "After", arg0)
}

func (_m *MockTime) AfterFunc(_param0 time.Duration, _param1 func()) ttime.Timer {
	ret := _m.ctrl.Call(_m, "AfterFunc", _param0, _param1)
	ret0, _ := ret[0].(ttime.Timer)
	return ret0
}

func (_mr *_MockTimeRecorder) AfterFunc(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AfterFunc", arg0, arg1)
}

func (_m *MockTime) Now() time.Time {
	ret := _m.ctrl.Call(_m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockTimeRecorder) Now() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Now")
}

func (_m *MockTime) Sleep(_param0 time.Duration) {
	_m.ctrl.Call(_m, "Sleep", _param0)
}

func (_mr *_MockTimeRecorder) Sleep(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sleep", arg0)
}

// Mock of Timer interface
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *_MockTimerRecorder
}

// Recorder for MockTimer (not exported)
type _MockTimerRecorder struct {
	mock *MockTimer
}

func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &_MockTimerRecorder{mock}
	return mock
}

func (_m *MockTimer) EXPECT() *_MockTimerRecorder {
	return _m.recorder
}

func (_m *MockTimer) Reset(_param0 time.Duration) bool {
	ret := _m.ctrl.Call(_m, "Reset", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTimerRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

func (_m *MockTimer) Stop() bool {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTimerRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}
