// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/handlers (interfaces: DockerStateResolver)

package mock_handlers

import (
	dockerstate "github.com/aws/amazon-ecs-agent/agent/engine/dockerstate"
	gomock "github.com/golang/mock/gomock"
)

// Mock of DockerStateResolver interface
type MockDockerStateResolver struct {
	ctrl     *gomock.Controller
	recorder *_MockDockerStateResolverRecorder
}

// Recorder for MockDockerStateResolver (not exported)
type _MockDockerStateResolverRecorder struct {
	mock *MockDockerStateResolver
}

func NewMockDockerStateResolver(ctrl *gomock.Controller) *MockDockerStateResolver {
	mock := &MockDockerStateResolver{ctrl: ctrl}
	mock.recorder = &_MockDockerStateResolverRecorder{mock}
	return mock
}

func (_m *MockDockerStateResolver) EXPECT() *_MockDockerStateResolverRecorder {
	return _m.recorder
}

func (_m *MockDockerStateResolver) State() dockerstate.TaskEngineState {
	ret := _m.ctrl.Call(_m, "State")
	ret0, _ := ret[0].(dockerstate.TaskEngineState)
	return ret0
}

func (_mr *_MockDockerStateResolverRecorder) State() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "State")
}
