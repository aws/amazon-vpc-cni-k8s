// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	AddNetworkRequest
	AddNetworkReply
	DelNetworkRequest
	DelNetworkReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddNetworkRequest struct {
	K8S_POD_NAME               string `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=K8SPODNAME" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=K8SPODNAMESPACE" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=K8SPODINFRACONTAINERID" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	Netns                      string `protobuf:"bytes,4,opt,name=Netns" json:"Netns,omitempty"`
	IfName                     string `protobuf:"bytes,5,opt,name=IfName" json:"IfName,omitempty"`
}

func (m *AddNetworkRequest) Reset()                    { *m = AddNetworkRequest{} }
func (m *AddNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*AddNetworkRequest) ProtoMessage()               {}
func (*AddNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddNetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *AddNetworkRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *AddNetworkRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

type AddNetworkReply struct {
	Success      bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	IPv4Addr     string `protobuf:"bytes,2,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	IPv4Subnet   string `protobuf:"bytes,3,opt,name=IPv4Subnet" json:"IPv4Subnet,omitempty"`
	DeviceNumber int32  `protobuf:"varint,4,opt,name=DeviceNumber" json:"DeviceNumber,omitempty"`
	MTU          int32  `protobuf:"varint,5,opt,name=MTU" json:"MTU,omitempty"`
}

func (m *AddNetworkReply) Reset()                    { *m = AddNetworkReply{} }
func (m *AddNetworkReply) String() string            { return proto.CompactTextString(m) }
func (*AddNetworkReply) ProtoMessage()               {}
func (*AddNetworkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddNetworkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddNetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *AddNetworkReply) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *AddNetworkReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *AddNetworkReply) GetMTU() int32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

type DelNetworkRequest struct {
	K8S_POD_NAME               string `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=K8SPODNAME" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=K8SPODNAMESPACE" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=K8SPODINFRACONTAINERID" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	IPv4Addr                   string `protobuf:"bytes,4,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	Reason                     string `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty"`
}

func (m *DelNetworkRequest) Reset()                    { *m = DelNetworkRequest{} }
func (m *DelNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*DelNetworkRequest) ProtoMessage()               {}
func (*DelNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelNetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *DelNetworkRequest) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *DelNetworkRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type DelNetworkReply struct {
	Success      bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	IPv4Addr     string `protobuf:"bytes,2,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	DeviceNumber int32  `protobuf:"varint,3,opt,name=DeviceNumber" json:"DeviceNumber,omitempty"`
}

func (m *DelNetworkReply) Reset()                    { *m = DelNetworkReply{} }
func (m *DelNetworkReply) String() string            { return proto.CompactTextString(m) }
func (*DelNetworkReply) ProtoMessage()               {}
func (*DelNetworkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelNetworkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DelNetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *DelNetworkReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*AddNetworkRequest)(nil), "rpc.AddNetworkRequest")
	proto.RegisterType((*AddNetworkReply)(nil), "rpc.AddNetworkReply")
	proto.RegisterType((*DelNetworkRequest)(nil), "rpc.DelNetworkRequest")
	proto.RegisterType((*DelNetworkReply)(nil), "rpc.DelNetworkReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CNIBackend service

type CNIBackendClient interface {
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error)
	DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error) {
	out := new(AddNetworkReply)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/AddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error) {
	out := new(DelNetworkReply)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/DelNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CNIBackend service

type CNIBackendServer interface {
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkReply, error)
	DelNetwork(context.Context, *DelNetworkRequest) (*DelNetworkReply, error)
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).DelNetwork(ctx, req.(*DelNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _CNIBackend_AddNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNIBackend_DelNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x4d, 0x6b, 0xe2, 0x50,
	0x14, 0x35, 0xe3, 0xc7, 0xe8, 0x45, 0x08, 0x3e, 0x24, 0x04, 0x07, 0x06, 0xc9, 0x6a, 0x98, 0x45,
	0x18, 0x66, 0x66, 0x21, 0xc3, 0x6c, 0xa2, 0xb1, 0x34, 0x48, 0x9f, 0x21, 0x29, 0x74, 0x19, 0x62,
	0x72, 0xdb, 0x8a, 0x31, 0x49, 0xf3, 0xa1, 0xf5, 0x1f, 0x14, 0xfa, 0xd3, 0xba, 0xea, 0x3f, 0x2a,
	0xef, 0x19, 0x35, 0x35, 0xbb, 0xae, 0xba, 0x7b, 0xe7, 0xdc, 0x73, 0xe0, 0x9e, 0xf3, 0xde, 0x83,
	0x4e, 0x12, 0x7b, 0x6a, 0x9c, 0x44, 0x59, 0x44, 0xea, 0x49, 0xec, 0x29, 0x2f, 0x02, 0xf4, 0x34,
	0xdf, 0xa7, 0x98, 0x6d, 0xa3, 0x64, 0x65, 0xe1, 0x43, 0x8e, 0x69, 0x46, 0x86, 0xd0, 0x9d, 0x8d,
	0x6c, 0xc7, 0x9c, 0xeb, 0x0e, 0xd5, 0xae, 0xa6, 0xb2, 0x30, 0x14, 0x7e, 0x74, 0x2c, 0x98, 0x8d,
	0x6c, 0x73, 0xae, 0x33, 0x86, 0xfc, 0x84, 0x5e, 0x59, 0x61, 0x9b, 0xda, 0x64, 0x2a, 0x7f, 0xe1,
	0x32, 0xf1, 0x24, 0xe3, 0x34, 0xf9, 0x07, 0x83, 0x83, 0xd6, 0xa0, 0x17, 0x96, 0xe6, 0x4c, 0xe6,
	0xf4, 0x5a, 0x33, 0xe8, 0xd4, 0x72, 0x0c, 0x5d, 0xae, 0x73, 0x93, 0xb4, 0x37, 0xf1, 0xf9, 0x71,
	0x6c, 0xe8, 0xa4, 0x0f, 0x4d, 0x8a, 0x59, 0x98, 0xca, 0x0d, 0x2e, 0xdb, 0x03, 0x22, 0x41, 0xcb,
	0xb8, 0xa5, 0xee, 0x1a, 0xe5, 0x26, 0xa7, 0x0b, 0xa4, 0x3c, 0x0b, 0x20, 0x96, 0xd3, 0xc4, 0xc1,
	0x8e, 0xc8, 0xf0, 0xd5, 0xce, 0x3d, 0x0f, 0xd3, 0x94, 0xc7, 0x68, 0x5b, 0x07, 0x48, 0x06, 0xd0,
	0x36, 0xcc, 0xcd, 0x5f, 0xcd, 0xf7, 0x93, 0x62, 0xf5, 0x23, 0x26, 0xdf, 0x01, 0xd8, 0xd9, 0xce,
	0x17, 0x21, 0x66, 0xc5, 0x8e, 0x25, 0x86, 0x28, 0xd0, 0xd5, 0x71, 0xb3, 0xf4, 0x90, 0xe6, 0xeb,
	0x05, 0x26, 0x7c, 0xbd, 0xa6, 0xf5, 0x8e, 0x53, 0x5e, 0x05, 0xe8, 0xe9, 0x18, 0x7c, 0xda, 0x6e,
	0xcb, 0xf9, 0x1b, 0x67, 0xf9, 0x25, 0x68, 0x59, 0xe8, 0xa6, 0x51, 0x78, 0x68, 0x78, 0x8f, 0x94,
	0x15, 0x88, 0xe5, 0x48, 0x1f, 0x2f, 0xf8, 0xbc, 0xc0, 0x7a, 0xb5, 0xc0, 0xdf, 0x4f, 0x02, 0xc0,
	0x84, 0x1a, 0x63, 0xd7, 0x5b, 0x61, 0xe8, 0x93, 0xff, 0x00, 0xa7, 0xcb, 0x25, 0x92, 0xca, 0x9e,
	0x72, 0xe5, 0xed, 0x0e, 0xfa, 0x15, 0x3e, 0x0e, 0x76, 0x4a, 0x8d, 0xb9, 0x4f, 0x9b, 0x17, 0xee,
	0xca, 0xed, 0x14, 0xee, 0xb3, 0x88, 0x4a, 0x6d, 0xfc, 0x0b, 0xbe, 0x2d, 0x23, 0xf5, 0x8e, 0x0d,
	0xf1, 0xd1, 0x5d, 0xc7, 0x01, 0xa6, 0xea, 0x3d, 0x06, 0x41, 0xb4, 0x8d, 0x92, 0xc0, 0x1f, 0x8b,
	0x97, 0xec, 0x7c, 0xc3, 0xce, 0x26, 0xfb, 0x5c, 0xa6, 0xb0, 0x68, 0xf1, 0x5f, 0xf6, 0xe7, 0x2d,
	0x00, 0x00, 0xff, 0xff, 0xb0, 0x25, 0x98, 0x3e, 0x72, 0x03, 0x00, 0x00,
}
