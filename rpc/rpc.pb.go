// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	AddNetworkRequest
	AddNetworkReply
	DelNetworkRequest
	DelNetworkReply
	EnforceNpRequest
	EnforceNpReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddNetworkRequest struct {
	ClientVersion              string `protobuf:"bytes,8,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	K8S_POD_NAME               string `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=K8SPODNAME" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=K8SPODNAMESPACE" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=K8SPODINFRACONTAINERID" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	ContainerID                string `protobuf:"bytes,7,opt,name=ContainerID" json:"ContainerID,omitempty"`
	IfName                     string `protobuf:"bytes,5,opt,name=IfName" json:"IfName,omitempty"`
	NetworkName                string `protobuf:"bytes,6,opt,name=NetworkName" json:"NetworkName,omitempty"`
	Netns                      string `protobuf:"bytes,4,opt,name=Netns" json:"Netns,omitempty"`
}

func (m *AddNetworkRequest) Reset()                    { *m = AddNetworkRequest{} }
func (m *AddNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*AddNetworkRequest) ProtoMessage()               {}
func (*AddNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddNetworkRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *AddNetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *AddNetworkRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *AddNetworkRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *AddNetworkRequest) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *AddNetworkRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

type AddNetworkReply struct {
	Success         bool     `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	IPv4Addr        string   `protobuf:"bytes,2,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	IPv6Addr        string   `protobuf:"bytes,11,opt,name=IPv6Addr" json:"IPv6Addr,omitempty"`
	DeviceNumber    int32    `protobuf:"varint,4,opt,name=DeviceNumber" json:"DeviceNumber,omitempty"`
	UseExternalSNAT bool     `protobuf:"varint,5,opt,name=UseExternalSNAT" json:"UseExternalSNAT,omitempty"`
	VPCv4CIDRs      []string `protobuf:"bytes,6,rep,name=VPCv4CIDRs" json:"VPCv4CIDRs,omitempty"`
	VPCv6CIDRs      []string `protobuf:"bytes,12,rep,name=VPCv6CIDRs" json:"VPCv6CIDRs,omitempty"`
	// start of pod-eni parameters
	PodVlanId           int32  `protobuf:"varint,7,opt,name=PodVlanId" json:"PodVlanId,omitempty"`
	PodENIMAC           string `protobuf:"bytes,8,opt,name=PodENIMAC" json:"PodENIMAC,omitempty"`
	PodENISubnetGW      string `protobuf:"bytes,9,opt,name=PodENISubnetGW" json:"PodENISubnetGW,omitempty"`
	ParentIfIndex       int32  `protobuf:"varint,10,opt,name=ParentIfIndex" json:"ParentIfIndex,omitempty"`
	EnableNetworkPolicy bool   `protobuf:"varint,13,opt,name=EnableNetworkPolicy" json:"EnableNetworkPolicy,omitempty"`
}

func (m *AddNetworkReply) Reset()                    { *m = AddNetworkReply{} }
func (m *AddNetworkReply) String() string            { return proto.CompactTextString(m) }
func (*AddNetworkReply) ProtoMessage()               {}
func (*AddNetworkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddNetworkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddNetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *AddNetworkReply) GetIPv6Addr() string {
	if m != nil {
		return m.IPv6Addr
	}
	return ""
}

func (m *AddNetworkReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *AddNetworkReply) GetUseExternalSNAT() bool {
	if m != nil {
		return m.UseExternalSNAT
	}
	return false
}

func (m *AddNetworkReply) GetVPCv4CIDRs() []string {
	if m != nil {
		return m.VPCv4CIDRs
	}
	return nil
}

func (m *AddNetworkReply) GetVPCv6CIDRs() []string {
	if m != nil {
		return m.VPCv6CIDRs
	}
	return nil
}

func (m *AddNetworkReply) GetPodVlanId() int32 {
	if m != nil {
		return m.PodVlanId
	}
	return 0
}

func (m *AddNetworkReply) GetPodENIMAC() string {
	if m != nil {
		return m.PodENIMAC
	}
	return ""
}

func (m *AddNetworkReply) GetPodENISubnetGW() string {
	if m != nil {
		return m.PodENISubnetGW
	}
	return ""
}

func (m *AddNetworkReply) GetParentIfIndex() int32 {
	if m != nil {
		return m.ParentIfIndex
	}
	return 0
}

func (m *AddNetworkReply) GetEnableNetworkPolicy() bool {
	if m != nil {
		return m.EnableNetworkPolicy
	}
	return false
}

type DelNetworkRequest struct {
	ClientVersion              string `protobuf:"bytes,9,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	K8S_POD_NAME               string `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=K8SPODNAME" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE          string `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=K8SPODNAMESPACE" json:"K8S_POD_NAMESPACE,omitempty"`
	K8S_POD_INFRA_CONTAINER_ID string `protobuf:"bytes,3,opt,name=K8S_POD_INFRA_CONTAINER_ID,json=K8SPODINFRACONTAINERID" json:"K8S_POD_INFRA_CONTAINER_ID,omitempty"`
	Reason                     string `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty"`
	ContainerID                string `protobuf:"bytes,8,opt,name=ContainerID" json:"ContainerID,omitempty"`
	IfName                     string `protobuf:"bytes,6,opt,name=IfName" json:"IfName,omitempty"`
	NetworkName                string `protobuf:"bytes,7,opt,name=NetworkName" json:"NetworkName,omitempty"`
}

func (m *DelNetworkRequest) Reset()                    { *m = DelNetworkRequest{} }
func (m *DelNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*DelNetworkRequest) ProtoMessage()               {}
func (*DelNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelNetworkRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

func (m *DelNetworkRequest) GetK8S_POD_INFRA_CONTAINER_ID() string {
	if m != nil {
		return m.K8S_POD_INFRA_CONTAINER_ID
	}
	return ""
}

func (m *DelNetworkRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *DelNetworkRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *DelNetworkRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *DelNetworkRequest) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

type DelNetworkReply struct {
	Success      bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	IPv4Addr     string `protobuf:"bytes,2,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	IPv6Addr     string `protobuf:"bytes,5,opt,name=IPv6Addr" json:"IPv6Addr,omitempty"`
	DeviceNumber int32  `protobuf:"varint,3,opt,name=DeviceNumber" json:"DeviceNumber,omitempty"`
	// start of pod-eni parameters
	PodVlanId int32 `protobuf:"varint,4,opt,name=PodVlanId" json:"PodVlanId,omitempty"`
}

func (m *DelNetworkReply) Reset()                    { *m = DelNetworkReply{} }
func (m *DelNetworkReply) String() string            { return proto.CompactTextString(m) }
func (*DelNetworkReply) ProtoMessage()               {}
func (*DelNetworkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelNetworkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DelNetworkReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *DelNetworkReply) GetIPv6Addr() string {
	if m != nil {
		return m.IPv6Addr
	}
	return ""
}

func (m *DelNetworkReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *DelNetworkReply) GetPodVlanId() int32 {
	if m != nil {
		return m.PodVlanId
	}
	return 0
}

type EnforceNpRequest struct {
	ClientVersion     string `protobuf:"bytes,3,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	K8S_POD_NAME      string `protobuf:"bytes,1,opt,name=K8S_POD_NAME,json=K8SPODNAME" json:"K8S_POD_NAME,omitempty"`
	K8S_POD_NAMESPACE string `protobuf:"bytes,2,opt,name=K8S_POD_NAMESPACE,json=K8SPODNAMESPACE" json:"K8S_POD_NAMESPACE,omitempty"`
}

func (m *EnforceNpRequest) Reset()                    { *m = EnforceNpRequest{} }
func (m *EnforceNpRequest) String() string            { return proto.CompactTextString(m) }
func (*EnforceNpRequest) ProtoMessage()               {}
func (*EnforceNpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EnforceNpRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *EnforceNpRequest) GetK8S_POD_NAME() string {
	if m != nil {
		return m.K8S_POD_NAME
	}
	return ""
}

func (m *EnforceNpRequest) GetK8S_POD_NAMESPACE() string {
	if m != nil {
		return m.K8S_POD_NAMESPACE
	}
	return ""
}

type EnforceNpReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *EnforceNpReply) Reset()                    { *m = EnforceNpReply{} }
func (m *EnforceNpReply) String() string            { return proto.CompactTextString(m) }
func (*EnforceNpReply) ProtoMessage()               {}
func (*EnforceNpReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EnforceNpReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*AddNetworkRequest)(nil), "rpc.AddNetworkRequest")
	proto.RegisterType((*AddNetworkReply)(nil), "rpc.AddNetworkReply")
	proto.RegisterType((*DelNetworkRequest)(nil), "rpc.DelNetworkRequest")
	proto.RegisterType((*DelNetworkReply)(nil), "rpc.DelNetworkReply")
	proto.RegisterType((*EnforceNpRequest)(nil), "rpc.EnforceNpRequest")
	proto.RegisterType((*EnforceNpReply)(nil), "rpc.EnforceNpReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CNIBackend service

type CNIBackendClient interface {
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error)
	DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkReply, error) {
	out := new(AddNetworkReply)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/AddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) DelNetwork(ctx context.Context, in *DelNetworkRequest, opts ...grpc.CallOption) (*DelNetworkReply, error) {
	out := new(DelNetworkReply)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/DelNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CNIBackend service

type CNIBackendServer interface {
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkReply, error)
	DelNetwork(context.Context, *DelNetworkRequest) (*DelNetworkReply, error)
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).DelNetwork(ctx, req.(*DelNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _CNIBackend_AddNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNIBackend_DelNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for NPBackend service

type NPBackendClient interface {
	PodAdd(ctx context.Context, in *EnforceNpRequest, opts ...grpc.CallOption) (*EnforceNpReply, error)
}

type nPBackendClient struct {
	cc *grpc.ClientConn
}

func NewNPBackendClient(cc *grpc.ClientConn) NPBackendClient {
	return &nPBackendClient{cc}
}

func (c *nPBackendClient) PodAdd(ctx context.Context, in *EnforceNpRequest, opts ...grpc.CallOption) (*EnforceNpReply, error) {
	out := new(EnforceNpReply)
	err := grpc.Invoke(ctx, "/rpc.NPBackend/PodAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NPBackend service

type NPBackendServer interface {
	PodAdd(context.Context, *EnforceNpRequest) (*EnforceNpReply, error)
}

func RegisterNPBackendServer(s *grpc.Server, srv NPBackendServer) {
	s.RegisterService(&_NPBackend_serviceDesc, srv)
}

func _NPBackend_PodAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceNpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NPBackendServer).PodAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NPBackend/PodAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NPBackendServer).PodAdd(ctx, req.(*EnforceNpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NPBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NPBackend",
	HandlerType: (*NPBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PodAdd",
			Handler:    _NPBackend_PodAdd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x9b, 0xa6, 0x71, 0x93, 0xdb, 0x3f, 0xf9, 0x3a, 0xed, 0x17, 0x59, 0x11, 0x42, 0x91,
	0x85, 0x50, 0x29, 0x6a, 0x8b, 0x4a, 0x55, 0x55, 0xc0, 0xc6, 0xb5, 0x0d, 0x1a, 0x55, 0x9d, 0x5a,
	0x4e, 0x29, 0x12, 0x9b, 0xc8, 0x19, 0x4f, 0xc1, 0xaa, 0x33, 0x36, 0x63, 0x27, 0x6d, 0x79, 0x00,
	0xc4, 0x8b, 0xb0, 0x64, 0x89, 0x78, 0x3d, 0x94, 0xb1, 0x53, 0x27, 0x4e, 0x49, 0x37, 0x20, 0xb1,
	0xbc, 0xe7, 0x9c, 0x9b, 0xcc, 0xdc, 0xfb, 0xd3, 0x18, 0x6a, 0x22, 0xa2, 0x3b, 0x91, 0x08, 0x93,
	0x10, 0x95, 0x45, 0x44, 0xb5, 0x1f, 0xf3, 0xb0, 0xa6, 0x7b, 0x1e, 0x61, 0xc9, 0x55, 0x28, 0x2e,
	0x1d, 0xf6, 0xa9, 0xcf, 0xe2, 0x04, 0x3d, 0x82, 0x15, 0x23, 0xf0, 0x19, 0x4f, 0xce, 0x99, 0x88,
	0xfd, 0x90, 0xab, 0xd5, 0x56, 0x69, 0xb3, 0xe6, 0x4c, 0x8a, 0xa8, 0x05, 0xcb, 0xc7, 0x87, 0xed,
	0x8e, 0x7d, 0x6a, 0x76, 0x88, 0x7e, 0x62, 0xa9, 0x25, 0x19, 0x82, 0xe3, 0xc3, 0xb6, 0x7d, 0x6a,
	0x0e, 0x15, 0xb4, 0x05, 0x6b, 0xe3, 0x89, 0xb6, 0xad, 0x1b, 0x96, 0x3a, 0x2f, 0x63, 0xf5, 0x3c,
	0x26, 0x65, 0xf4, 0x02, 0x9a, 0xa3, 0x2c, 0x26, 0xaf, 0x1d, 0xbd, 0x63, 0x9c, 0x92, 0x33, 0x1d,
	0x13, 0xcb, 0xe9, 0x60, 0x53, 0x2d, 0xcb, 0xa6, 0x46, 0xda, 0x24, 0xfd, 0x5b, 0x1b, 0x9b, 0xa8,
	0x05, 0x4b, 0x46, 0xc8, 0x13, 0xd7, 0xe7, 0x4c, 0x60, 0x53, 0x5d, 0x94, 0xe1, 0x71, 0x09, 0x35,
	0x40, 0xc1, 0x17, 0xc4, 0xed, 0x31, 0xb5, 0x22, 0xcd, 0xac, 0x1a, 0x76, 0x66, 0x77, 0x97, 0xa6,
	0x92, 0x76, 0x8e, 0x49, 0x68, 0x03, 0x2a, 0x84, 0x25, 0x3c, 0x56, 0x17, 0xa4, 0x97, 0x16, 0xda,
	0xf7, 0x32, 0xd4, 0xc7, 0xe7, 0x16, 0x05, 0x37, 0x48, 0x85, 0xc5, 0x76, 0x9f, 0x52, 0x16, 0xc7,
	0x72, 0x14, 0x55, 0x67, 0x54, 0xa2, 0x26, 0x54, 0xb1, 0x3d, 0xd8, 0xd7, 0x3d, 0x4f, 0x64, 0xd7,
	0xbf, 0xad, 0x33, 0xef, 0x40, 0x7a, 0x4b, 0xb7, 0x9e, 0xac, 0x91, 0x06, 0xcb, 0x26, 0x1b, 0xf8,
	0x94, 0x91, 0x7e, 0xaf, 0xcb, 0x84, 0x3c, 0x42, 0xc5, 0x99, 0xd0, 0xd0, 0x26, 0xd4, 0xdf, 0xc6,
	0xcc, 0xba, 0x4e, 0x98, 0xe0, 0x6e, 0xd0, 0x26, 0xfa, 0x99, 0xbc, 0x62, 0xd5, 0x29, 0xca, 0xe8,
	0x21, 0xc0, 0xb9, 0x6d, 0x0c, 0xf6, 0x0d, 0x6c, 0x3a, 0xb1, 0xaa, 0xb4, 0xca, 0xc3, 0x6d, 0xe5,
	0xca, 0xc8, 0x3f, 0x48, 0xfd, 0xe5, 0xdc, 0x4f, 0x15, 0xf4, 0x00, 0x6a, 0x76, 0xe8, 0x9d, 0x07,
	0x2e, 0xc7, 0x9e, 0x9c, 0x71, 0xc5, 0xc9, 0x85, 0xcc, 0xb5, 0x08, 0x3e, 0xd1, 0x8d, 0x8c, 0x97,
	0x5c, 0x40, 0x8f, 0x61, 0x35, 0x2d, 0xda, 0xfd, 0x2e, 0x67, 0xc9, 0x9b, 0x77, 0x6a, 0x4d, 0x46,
	0x0a, 0xea, 0x90, 0x3c, 0xdb, 0x15, 0x8c, 0x27, 0xf8, 0x02, 0x73, 0x8f, 0x5d, 0xab, 0x20, 0xff,
	0x67, 0x52, 0x44, 0xcf, 0x60, 0xdd, 0xe2, 0x6e, 0x37, 0x60, 0xd9, 0xfc, 0xed, 0x30, 0xf0, 0xe9,
	0x8d, 0xba, 0x22, 0xef, 0x7d, 0x97, 0xa5, 0xfd, 0x9c, 0x87, 0x35, 0x93, 0x05, 0xf7, 0x71, 0x5e,
	0xfb, 0xb7, 0x39, 0x6f, 0x80, 0xe2, 0x30, 0x37, 0x0e, 0xf9, 0x88, 0xe2, 0xb4, 0x2a, 0xf2, 0x5f,
	0x9d, 0xc5, 0xbf, 0x32, 0x8b, 0xff, 0xc5, 0x29, 0xfe, 0xb5, 0x6f, 0x25, 0xa8, 0x8f, 0x4f, 0xee,
	0xcf, 0x90, 0x5e, 0xb9, 0x87, 0xf4, 0xf2, 0x1d, 0xa4, 0x4f, 0xf0, 0xb7, 0x50, 0xe0, 0x4f, 0xfb,
	0x52, 0x82, 0xff, 0x2c, 0x7e, 0x11, 0x0a, 0xca, 0x48, 0xf4, 0xdb, 0x05, 0x97, 0xff, 0xfa, 0x82,
	0xb5, 0x2d, 0x58, 0x1d, 0x3b, 0xc7, 0xcc, 0x71, 0xed, 0x7d, 0x2d, 0x01, 0x18, 0x04, 0x1f, 0xb9,
	0xf4, 0x92, 0x71, 0x0f, 0xbd, 0x02, 0xc8, 0x1f, 0x15, 0xd4, 0xd8, 0x19, 0x3e, 0xd6, 0x53, 0xaf,
	0x73, 0x73, 0x63, 0x4a, 0x8f, 0x82, 0x1b, 0x6d, 0x6e, 0xd8, 0x9d, 0x2f, 0x2a, 0xeb, 0x9e, 0x62,
	0x3e, 0xeb, 0x2e, 0x6c, 0x54, 0x9b, 0xdb, 0x33, 0xa0, 0x46, 0xec, 0xd1, 0x41, 0x0e, 0x40, 0xb1,
	0x43, 0x4f, 0xf7, 0x3c, 0xf4, 0xbf, 0x8c, 0x17, 0x07, 0xdb, 0x5c, 0x2f, 0xca, 0xf2, 0x47, 0x8e,
	0x9e, 0xbe, 0x7f, 0xf2, 0xc1, 0x4f, 0x3e, 0xf6, 0xbb, 0x3b, 0x34, 0xec, 0xed, 0xba, 0x57, 0xf1,
	0xae, 0xdb, 0x73, 0x3f, 0x87, 0x7c, 0x7b, 0x10, 0xd1, 0x6d, 0xca, 0xfd, 0xed, 0xcb, 0xc3, 0x78,
	0x57, 0x44, 0xf4, 0xa5, 0x88, 0x68, 0x57, 0x91, 0xdf, 0xa1, 0xe7, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x5a, 0x7d, 0x14, 0x94, 0x06, 0x00, 0x00,
}
