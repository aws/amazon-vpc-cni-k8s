// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-k8s/pkg/awsutils (interfaces: APIs)

// Package mock_awsutils is a generated GoMock package.
package mock_awsutils

import (
	reflect "reflect"

	awsutils "github.com/aws/amazon-vpc-cni-k8s/pkg/awsutils"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIs is a mock of APIs interface
type MockAPIs struct {
	ctrl     *gomock.Controller
	recorder *MockAPIsMockRecorder
}

// MockAPIsMockRecorder is the mock recorder for MockAPIs
type MockAPIsMockRecorder struct {
	mock *MockAPIs
}

// NewMockAPIs creates a new mock instance
func NewMockAPIs(ctrl *gomock.Controller) *MockAPIs {
	mock := &MockAPIs{ctrl: ctrl}
	mock.recorder = &MockAPIsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIs) EXPECT() *MockAPIsMockRecorder {
	return m.recorder
}

// AllocENI mocks base method
func (m *MockAPIs) AllocENI(arg0 bool, arg1 []*string, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocENI", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocENI indicates an expected call of AllocENI
func (mr *MockAPIsMockRecorder) AllocENI(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocENI", reflect.TypeOf((*MockAPIs)(nil).AllocENI), arg0, arg1, arg2)
}

// AllocIPv4Addresses mocks base method
func (m *MockAPIs) AllocIPv4Addresses(arg0 string, arg1 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIPv4Addresses", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocIPv4Addresses indicates an expected call of AllocIPv4Addresses
func (mr *MockAPIsMockRecorder) AllocIPv4Addresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIPv4Addresses", reflect.TypeOf((*MockAPIs)(nil).AllocIPv4Addresses), arg0, arg1)
}

// AllocIPv6Addresses mocks base method
func (m *MockAPIs) AllocIPv6Addresses(arg0 string, arg1 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIPv6Addresses", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocIPv6Addresses indicates an expected call of AllocIPv6Addresses
func (mr *MockAPIsMockRecorder) AllocIPv6Addresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIPv6Addresses", reflect.TypeOf((*MockAPIs)(nil).AllocIPv6Addresses), arg0, arg1)
}

// DeallocIPv4Addresses mocks base method
func (m *MockAPIs) DeallocIPv4Addresses(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocIPv4Addresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocIPv4Addresses indicates an expected call of DeallocIPv4Addresses
func (mr *MockAPIsMockRecorder) DeallocIPv4Addresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocIPv4Addresses", reflect.TypeOf((*MockAPIs)(nil).DeallocIPv4Addresses), arg0, arg1)
}

// DeallocIPv6Addresses mocks base method
func (m *MockAPIs) DeallocIPv6Addresses(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocIPv6Addresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocIPv6Addresses indicates an expected call of DeallocIPv6Addresses
func (mr *MockAPIsMockRecorder) DeallocIPv6Addresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocIPv6Addresses", reflect.TypeOf((*MockAPIs)(nil).DeallocIPv6Addresses), arg0, arg1)
}

// DescribeAllENIs mocks base method
func (m *MockAPIs) DescribeAllENIs() ([]awsutils.ENIMetadata, map[string]awsutils.TagMap, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAllENIs")
	ret0, _ := ret[0].([]awsutils.ENIMetadata)
	ret1, _ := ret[1].(map[string]awsutils.TagMap)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DescribeAllENIs indicates an expected call of DescribeAllENIs
func (mr *MockAPIsMockRecorder) DescribeAllENIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAllENIs", reflect.TypeOf((*MockAPIs)(nil).DescribeAllENIs))
}

// FreeENI mocks base method
func (m *MockAPIs) FreeENI(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeENI", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeENI indicates an expected call of FreeENI
func (mr *MockAPIsMockRecorder) FreeENI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeENI", reflect.TypeOf((*MockAPIs)(nil).FreeENI), arg0)
}

// GetAttachedENIs mocks base method
func (m *MockAPIs) GetAttachedENIs() ([]awsutils.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedENIs")
	ret0, _ := ret[0].([]awsutils.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedENIs indicates an expected call of GetAttachedENIs
func (mr *MockAPIsMockRecorder) GetAttachedENIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedENIs", reflect.TypeOf((*MockAPIs)(nil).GetAttachedENIs))
}

// GetENIIPv4Limit mocks base method
func (m *MockAPIs) GetENIIPv4Limit() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENIIPv4Limit")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetENIIPv4Limit indicates an expected call of GetENIIPv4Limit
func (mr *MockAPIsMockRecorder) GetENIIPv4Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENIIPv4Limit", reflect.TypeOf((*MockAPIs)(nil).GetENIIPv4Limit))
}

// GetENILimit mocks base method
func (m *MockAPIs) GetENILimit() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENILimit")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetENILimit indicates an expected call of GetENILimit
func (mr *MockAPIsMockRecorder) GetENILimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENILimit", reflect.TypeOf((*MockAPIs)(nil).GetENILimit))
}

// GetIPsFromEC2 mocks base method
func (m *MockAPIs) GetIPsFromEC2(arg0 string) ([]*ec2.NetworkInterfacePrivateIpAddress, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPsFromEC2", arg0)
	ret0, _ := ret[0].([]*ec2.NetworkInterfacePrivateIpAddress)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIPsFromEC2 indicates an expected call of GetIPsFromEC2
func (mr *MockAPIsMockRecorder) GetIPsFromEC2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPsFromEC2", reflect.TypeOf((*MockAPIs)(nil).GetIPsFromEC2), arg0)
}

// GetLocalIPv4 mocks base method
func (m *MockAPIs) GetLocalIPv4() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalIPv4")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocalIPv4 indicates an expected call of GetLocalIPv4
func (mr *MockAPIsMockRecorder) GetLocalIPv4() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalIPv4", reflect.TypeOf((*MockAPIs)(nil).GetLocalIPv4))
}

// GetPrimaryENI mocks base method
func (m *MockAPIs) GetPrimaryENI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryENI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrimaryENI indicates an expected call of GetPrimaryENI
func (mr *MockAPIsMockRecorder) GetPrimaryENI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryENI", reflect.TypeOf((*MockAPIs)(nil).GetPrimaryENI))
}

// GetPrimaryENImac mocks base method
func (m *MockAPIs) GetPrimaryENImac() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryENImac")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrimaryENImac indicates an expected call of GetPrimaryENImac
func (mr *MockAPIsMockRecorder) GetPrimaryENImac() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryENImac", reflect.TypeOf((*MockAPIs)(nil).GetPrimaryENImac))
}

// GetVPCIPv4CIDRs mocks base method
func (m *MockAPIs) GetVPCIPv4CIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCIPv4CIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVPCIPv4CIDRs indicates an expected call of GetVPCIPv4CIDRs
func (mr *MockAPIsMockRecorder) GetVPCIPv4CIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCIPv4CIDRs", reflect.TypeOf((*MockAPIs)(nil).GetVPCIPv4CIDRs))
}

// GetVPCIPv6CIDRs mocks base method
func (m *MockAPIs) GetVPCIPv6CIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCIPv6CIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVPCIPv6CIDRs indicates an expected call of GetVPCIPv6CIDRs
func (mr *MockAPIsMockRecorder) GetVPCIPv6CIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCIPv6CIDRs", reflect.TypeOf((*MockAPIs)(nil).GetVPCIPv6CIDRs))
}

// IsUnmanagedENI mocks base method
func (m *MockAPIs) IsUnmanagedENI(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnmanagedENI", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnmanagedENI indicates an expected call of IsUnmanagedENI
func (mr *MockAPIsMockRecorder) IsUnmanagedENI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnmanagedENI", reflect.TypeOf((*MockAPIs)(nil).IsUnmanagedENI), arg0)
}

// SetUnmanagedENIs mocks base method
func (m *MockAPIs) SetUnmanagedENIs(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUnmanagedENIs", arg0)
}

// SetUnmanagedENIs indicates an expected call of SetUnmanagedENIs
func (mr *MockAPIsMockRecorder) SetUnmanagedENIs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnmanagedENIs", reflect.TypeOf((*MockAPIs)(nil).SetUnmanagedENIs), arg0)
}

// WaitForENIAndIPsAttached mocks base method
func (m *MockAPIs) WaitForENIAndIPsAttached(arg0 string, arg1 int) (awsutils.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForENIAndIPsAttached", arg0, arg1)
	ret0, _ := ret[0].(awsutils.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForENIAndIPsAttached indicates an expected call of WaitForENIAndIPsAttached
func (mr *MockAPIsMockRecorder) WaitForENIAndIPsAttached(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForENIAndIPsAttached", reflect.TypeOf((*MockAPIs)(nil).WaitForENIAndIPsAttached), arg0, arg1)
}
