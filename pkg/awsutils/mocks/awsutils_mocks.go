// Code generated by MockGen. DO NOT EDIT.
// Source: awsutils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	awsutils "github.com/aws/amazon-vpc-cni-k8s/pkg/awsutils"
	datastore "github.com/aws/amazon-vpc-cni-k8s/pkg/ipamd/datastore"
	vpc "github.com/aws/amazon-vpc-cni-k8s/pkg/vpc"
	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIs is a mock of APIs interface.
type MockAPIs struct {
	ctrl     *gomock.Controller
	recorder *MockAPIsMockRecorder
}

// MockAPIsMockRecorder is the mock recorder for MockAPIs.
type MockAPIsMockRecorder struct {
	mock *MockAPIs
}

// NewMockAPIs creates a new mock instance.
func NewMockAPIs(ctrl *gomock.Controller) *MockAPIs {
	mock := &MockAPIs{ctrl: ctrl}
	mock.recorder = &MockAPIsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIs) EXPECT() *MockAPIsMockRecorder {
	return m.recorder
}

// AllocENI mocks base method.
func (m *MockAPIs) AllocENI(sg []*string, eniCfgSubnet string, numIPs, networkCard int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocENI", sg, eniCfgSubnet, numIPs, networkCard)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocENI indicates an expected call of AllocENI.
func (mr *MockAPIsMockRecorder) AllocENI(sg, eniCfgSubnet, numIPs, networkCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocENI", reflect.TypeOf((*MockAPIs)(nil).AllocENI), sg, eniCfgSubnet, numIPs, networkCard)
}

// AllocIPAddress mocks base method.
func (m *MockAPIs) AllocIPAddress(eniID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIPAddress", eniID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocIPAddress indicates an expected call of AllocIPAddress.
func (mr *MockAPIsMockRecorder) AllocIPAddress(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIPAddress", reflect.TypeOf((*MockAPIs)(nil).AllocIPAddress), eniID)
}

// AllocIPAddresses mocks base method.
func (m *MockAPIs) AllocIPAddresses(eniID string, numIPs int) (*ec2.AssignPrivateIpAddressesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIPAddresses", eniID, numIPs)
	ret0, _ := ret[0].(*ec2.AssignPrivateIpAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocIPAddresses indicates an expected call of AllocIPAddresses.
func (mr *MockAPIsMockRecorder) AllocIPAddresses(eniID, numIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIPAddresses", reflect.TypeOf((*MockAPIs)(nil).AllocIPAddresses), eniID, numIPs)
}

// AllocIPv6Prefixes mocks base method.
func (m *MockAPIs) AllocIPv6Prefixes(eniID string) ([]*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIPv6Prefixes", eniID)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocIPv6Prefixes indicates an expected call of AllocIPv6Prefixes.
func (mr *MockAPIsMockRecorder) AllocIPv6Prefixes(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIPv6Prefixes", reflect.TypeOf((*MockAPIs)(nil).AllocIPv6Prefixes), eniID)
}

// DeallocIPAddresses mocks base method.
func (m *MockAPIs) DeallocIPAddresses(eniID string, ips []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocIPAddresses", eniID, ips)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocIPAddresses indicates an expected call of DeallocIPAddresses.
func (mr *MockAPIsMockRecorder) DeallocIPAddresses(eniID, ips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocIPAddresses", reflect.TypeOf((*MockAPIs)(nil).DeallocIPAddresses), eniID, ips)
}

// DeallocPrefixAddresses mocks base method.
func (m *MockAPIs) DeallocPrefixAddresses(eniID string, ips []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocPrefixAddresses", eniID, ips)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocPrefixAddresses indicates an expected call of DeallocPrefixAddresses.
func (mr *MockAPIsMockRecorder) DeallocPrefixAddresses(eniID, ips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocPrefixAddresses", reflect.TypeOf((*MockAPIs)(nil).DeallocPrefixAddresses), eniID, ips)
}

// DescribeAllENIs mocks base method.
func (m *MockAPIs) DescribeAllENIs() (awsutils.DescribeAllENIsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAllENIs")
	ret0, _ := ret[0].(awsutils.DescribeAllENIsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAllENIs indicates an expected call of DescribeAllENIs.
func (mr *MockAPIsMockRecorder) DescribeAllENIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAllENIs", reflect.TypeOf((*MockAPIs)(nil).DescribeAllENIs))
}

// FetchInstanceTypeLimits mocks base method.
func (m *MockAPIs) FetchInstanceTypeLimits() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInstanceTypeLimits")
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchInstanceTypeLimits indicates an expected call of FetchInstanceTypeLimits.
func (mr *MockAPIsMockRecorder) FetchInstanceTypeLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInstanceTypeLimits", reflect.TypeOf((*MockAPIs)(nil).FetchInstanceTypeLimits))
}

// FreeENI mocks base method.
func (m *MockAPIs) FreeENI(eniName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeENI", eniName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeENI indicates an expected call of FreeENI.
func (mr *MockAPIsMockRecorder) FreeENI(eniName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeENI", reflect.TypeOf((*MockAPIs)(nil).FreeENI), eniName)
}

// GetAttachedENIs mocks base method.
func (m *MockAPIs) GetAttachedENIs() ([]awsutils.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedENIs")
	ret0, _ := ret[0].([]awsutils.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedENIs indicates an expected call of GetAttachedENIs.
func (mr *MockAPIsMockRecorder) GetAttachedENIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedENIs", reflect.TypeOf((*MockAPIs)(nil).GetAttachedENIs))
}

// GetENIIPv4Limit mocks base method.
func (m *MockAPIs) GetENIIPv4Limit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENIIPv4Limit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetENIIPv4Limit indicates an expected call of GetENIIPv4Limit.
func (mr *MockAPIsMockRecorder) GetENIIPv4Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENIIPv4Limit", reflect.TypeOf((*MockAPIs)(nil).GetENIIPv4Limit))
}

// GetENILimit mocks base method.
func (m *MockAPIs) GetENILimit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENILimit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetENILimit indicates an expected call of GetENILimit.
func (mr *MockAPIsMockRecorder) GetENILimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENILimit", reflect.TypeOf((*MockAPIs)(nil).GetENILimit))
}

// GetIPv4PrefixesFromEC2 mocks base method.
func (m *MockAPIs) GetIPv4PrefixesFromEC2(eniID string) ([]types.Ipv4PrefixSpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPv4PrefixesFromEC2", eniID)
	ret0, _ := ret[0].([]types.Ipv4PrefixSpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPv4PrefixesFromEC2 indicates an expected call of GetIPv4PrefixesFromEC2.
func (mr *MockAPIsMockRecorder) GetIPv4PrefixesFromEC2(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPv4PrefixesFromEC2", reflect.TypeOf((*MockAPIs)(nil).GetIPv4PrefixesFromEC2), eniID)
}

// GetIPv4sFromEC2 mocks base method.
func (m *MockAPIs) GetIPv4sFromEC2(eniID string) ([]types.NetworkInterfacePrivateIpAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPv4sFromEC2", eniID)
	ret0, _ := ret[0].([]types.NetworkInterfacePrivateIpAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPv4sFromEC2 indicates an expected call of GetIPv4sFromEC2.
func (mr *MockAPIsMockRecorder) GetIPv4sFromEC2(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPv4sFromEC2", reflect.TypeOf((*MockAPIs)(nil).GetIPv4sFromEC2), eniID)
}

// GetIPv6PrefixesFromEC2 mocks base method.
func (m *MockAPIs) GetIPv6PrefixesFromEC2(eniID string) ([]types.Ipv6PrefixSpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPv6PrefixesFromEC2", eniID)
	ret0, _ := ret[0].([]types.Ipv6PrefixSpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPv6PrefixesFromEC2 indicates an expected call of GetIPv6PrefixesFromEC2.
func (mr *MockAPIsMockRecorder) GetIPv6PrefixesFromEC2(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPv6PrefixesFromEC2", reflect.TypeOf((*MockAPIs)(nil).GetIPv6PrefixesFromEC2), eniID)
}

// GetInstanceHypervisorFamily mocks base method.
func (m *MockAPIs) GetInstanceHypervisorFamily() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceHypervisorFamily")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInstanceHypervisorFamily indicates an expected call of GetInstanceHypervisorFamily.
func (mr *MockAPIsMockRecorder) GetInstanceHypervisorFamily() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceHypervisorFamily", reflect.TypeOf((*MockAPIs)(nil).GetInstanceHypervisorFamily))
}

// GetInstanceID mocks base method.
func (m *MockAPIs) GetInstanceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockAPIsMockRecorder) GetInstanceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockAPIs)(nil).GetInstanceID))
}

// GetInstanceType mocks base method.
func (m *MockAPIs) GetInstanceType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInstanceType indicates an expected call of GetInstanceType.
func (mr *MockAPIsMockRecorder) GetInstanceType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceType", reflect.TypeOf((*MockAPIs)(nil).GetInstanceType))
}

// GetLocalIPv4 mocks base method.
func (m *MockAPIs) GetLocalIPv4() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalIPv4")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// GetLocalIPv4 indicates an expected call of GetLocalIPv4.
func (mr *MockAPIsMockRecorder) GetLocalIPv4() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalIPv4", reflect.TypeOf((*MockAPIs)(nil).GetLocalIPv4))
}

// GetLocalIPv6 mocks base method.
func (m *MockAPIs) GetLocalIPv6() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalIPv6")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// GetLocalIPv6 indicates an expected call of GetLocalIPv6.
func (mr *MockAPIsMockRecorder) GetLocalIPv6() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalIPv6", reflect.TypeOf((*MockAPIs)(nil).GetLocalIPv6))
}

// GetNetworkCards mocks base method.
func (m *MockAPIs) GetNetworkCards() []vpc.NetworkCard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkCards")
	ret0, _ := ret[0].([]vpc.NetworkCard)
	return ret0
}

// GetNetworkCards indicates an expected call of GetNetworkCards.
func (mr *MockAPIsMockRecorder) GetNetworkCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkCards", reflect.TypeOf((*MockAPIs)(nil).GetNetworkCards))
}

// GetPrimaryENI mocks base method.
func (m *MockAPIs) GetPrimaryENI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryENI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrimaryENI indicates an expected call of GetPrimaryENI.
func (mr *MockAPIsMockRecorder) GetPrimaryENI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryENI", reflect.TypeOf((*MockAPIs)(nil).GetPrimaryENI))
}

// GetPrimaryENImac mocks base method.
func (m *MockAPIs) GetPrimaryENImac() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryENImac")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrimaryENImac indicates an expected call of GetPrimaryENImac.
func (mr *MockAPIsMockRecorder) GetPrimaryENImac() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryENImac", reflect.TypeOf((*MockAPIs)(nil).GetPrimaryENImac))
}

// GetVPCIPv4CIDRs mocks base method.
func (m *MockAPIs) GetVPCIPv4CIDRs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCIPv4CIDRs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCIPv4CIDRs indicates an expected call of GetVPCIPv4CIDRs.
func (mr *MockAPIsMockRecorder) GetVPCIPv4CIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCIPv4CIDRs", reflect.TypeOf((*MockAPIs)(nil).GetVPCIPv4CIDRs))
}

// GetVPCIPv6CIDRs mocks base method.
func (m *MockAPIs) GetVPCIPv6CIDRs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCIPv6CIDRs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCIPv6CIDRs indicates an expected call of GetVPCIPv6CIDRs.
func (mr *MockAPIsMockRecorder) GetVPCIPv6CIDRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCIPv6CIDRs", reflect.TypeOf((*MockAPIs)(nil).GetVPCIPv6CIDRs))
}

// InitCachedPrefixDelegation mocks base method.
func (m *MockAPIs) InitCachedPrefixDelegation(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitCachedPrefixDelegation", arg0)
}

// InitCachedPrefixDelegation indicates an expected call of InitCachedPrefixDelegation.
func (mr *MockAPIsMockRecorder) InitCachedPrefixDelegation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCachedPrefixDelegation", reflect.TypeOf((*MockAPIs)(nil).InitCachedPrefixDelegation), arg0)
}

// IsEfaOnlyENI mocks base method.
func (m *MockAPIs) IsEfaOnlyENI(networkCard int, eni string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEfaOnlyENI", networkCard, eni)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEfaOnlyENI indicates an expected call of IsEfaOnlyENI.
func (mr *MockAPIsMockRecorder) IsEfaOnlyENI(networkCard, eni interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEfaOnlyENI", reflect.TypeOf((*MockAPIs)(nil).IsEfaOnlyENI), networkCard, eni)
}

// IsPrefixDelegationSupported mocks base method.
func (m *MockAPIs) IsPrefixDelegationSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrefixDelegationSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPrefixDelegationSupported indicates an expected call of IsPrefixDelegationSupported.
func (mr *MockAPIsMockRecorder) IsPrefixDelegationSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrefixDelegationSupported", reflect.TypeOf((*MockAPIs)(nil).IsPrefixDelegationSupported))
}

// IsPrimaryENI mocks base method.
func (m *MockAPIs) IsPrimaryENI(eniID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrimaryENI", eniID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPrimaryENI indicates an expected call of IsPrimaryENI.
func (mr *MockAPIsMockRecorder) IsPrimaryENI(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrimaryENI", reflect.TypeOf((*MockAPIs)(nil).IsPrimaryENI), eniID)
}

// IsUnmanagedENI mocks base method.
func (m *MockAPIs) IsUnmanagedENI(eniID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnmanagedENI", eniID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnmanagedENI indicates an expected call of IsUnmanagedENI.
func (mr *MockAPIsMockRecorder) IsUnmanagedENI(eniID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnmanagedENI", reflect.TypeOf((*MockAPIs)(nil).IsUnmanagedENI), eniID)
}

// IsUnmanagedNIC mocks base method.
func (m *MockAPIs) IsUnmanagedNIC(networkCard int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnmanagedNIC", networkCard)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnmanagedNIC indicates an expected call of IsUnmanagedNIC.
func (mr *MockAPIsMockRecorder) IsUnmanagedNIC(networkCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnmanagedNIC", reflect.TypeOf((*MockAPIs)(nil).IsUnmanagedNIC), networkCard)
}

// RefreshSGIDs mocks base method.
func (m *MockAPIs) RefreshSGIDs(mac string, ds *datastore.DataStoreAccess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSGIDs", mac, ds)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSGIDs indicates an expected call of RefreshSGIDs.
func (mr *MockAPIsMockRecorder) RefreshSGIDs(mac, ds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSGIDs", reflect.TypeOf((*MockAPIs)(nil).RefreshSGIDs), mac, ds)
}

// SetEFAOnlyENIs mocks base method.
func (m *MockAPIs) SetEFAOnlyENIs(efaOnlyENIByNetworkCard []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEFAOnlyENIs", efaOnlyENIByNetworkCard)
}

// SetEFAOnlyENIs indicates an expected call of SetEFAOnlyENIs.
func (mr *MockAPIsMockRecorder) SetEFAOnlyENIs(efaOnlyENIByNetworkCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEFAOnlyENIs", reflect.TypeOf((*MockAPIs)(nil).SetEFAOnlyENIs), efaOnlyENIByNetworkCard)
}

// SetUnmanagedENIs mocks base method.
func (m *MockAPIs) SetUnmanagedENIs(eniIDs []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUnmanagedENIs", eniIDs)
}

// SetUnmanagedENIs indicates an expected call of SetUnmanagedENIs.
func (mr *MockAPIsMockRecorder) SetUnmanagedENIs(eniIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnmanagedENIs", reflect.TypeOf((*MockAPIs)(nil).SetUnmanagedENIs), eniIDs)
}

// SetUnmanagedNetworkCards mocks base method.
func (m *MockAPIs) SetUnmanagedNetworkCards(skipNetworkCards []bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUnmanagedNetworkCards", skipNetworkCards)
}

// SetUnmanagedNetworkCards indicates an expected call of SetUnmanagedNetworkCards.
func (mr *MockAPIsMockRecorder) SetUnmanagedNetworkCards(skipNetworkCards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnmanagedNetworkCards", reflect.TypeOf((*MockAPIs)(nil).SetUnmanagedNetworkCards), skipNetworkCards)
}

// TagENI mocks base method.
func (m *MockAPIs) TagENI(eniID string, currentTags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagENI", eniID, currentTags)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagENI indicates an expected call of TagENI.
func (mr *MockAPIsMockRecorder) TagENI(eniID, currentTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagENI", reflect.TypeOf((*MockAPIs)(nil).TagENI), eniID, currentTags)
}

// WaitForENIAndIPsAttached mocks base method.
func (m *MockAPIs) WaitForENIAndIPsAttached(eni string, wantedSecondaryIPs int) (awsutils.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForENIAndIPsAttached", eni, wantedSecondaryIPs)
	ret0, _ := ret[0].(awsutils.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForENIAndIPsAttached indicates an expected call of WaitForENIAndIPsAttached.
func (mr *MockAPIsMockRecorder) WaitForENIAndIPsAttached(eni, wantedSecondaryIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForENIAndIPsAttached", reflect.TypeOf((*MockAPIs)(nil).WaitForENIAndIPsAttached), eni, wantedSecondaryIPs)
}
