// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-k8s/pkg/typeswrapper (interfaces: CNITYPES)

// Package mock_typeswrapper is a generated GoMock package.
package mock_typeswrapper

import (
	reflect "reflect"

	types "github.com/containernetworking/cni/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCNITYPES is a mock of CNITYPES interface
type MockCNITYPES struct {
	ctrl     *gomock.Controller
	recorder *MockCNITYPESMockRecorder
}

// MockCNITYPESMockRecorder is the mock recorder for MockCNITYPES
type MockCNITYPESMockRecorder struct {
	mock *MockCNITYPES
}

// NewMockCNITYPES creates a new mock instance
func NewMockCNITYPES(ctrl *gomock.Controller) *MockCNITYPES {
	mock := &MockCNITYPES{ctrl: ctrl}
	mock.recorder = &MockCNITYPESMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCNITYPES) EXPECT() *MockCNITYPESMockRecorder {
	return m.recorder
}

// LoadArgs mocks base method
func (m *MockCNITYPES) LoadArgs(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadArgs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadArgs indicates an expected call of LoadArgs
func (mr *MockCNITYPESMockRecorder) LoadArgs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadArgs", reflect.TypeOf((*MockCNITYPES)(nil).LoadArgs), arg0, arg1)
}

// PrintResult mocks base method
func (m *MockCNITYPES) PrintResult(arg0 types.Result, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintResult indicates an expected call of PrintResult
func (mr *MockCNITYPESMockRecorder) PrintResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintResult", reflect.TypeOf((*MockCNITYPES)(nil).PrintResult), arg0, arg1)
}
