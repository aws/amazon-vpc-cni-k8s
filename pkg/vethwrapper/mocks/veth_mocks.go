// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-k8s/pkg/vethwrapper (interfaces: Veth)

// Package mock_vethwrapper is a generated GoMock package.
package mock_vethwrapper

import (
	net "net"
	reflect "reflect"

	ns "github.com/containernetworking/plugins/pkg/ns"
	gomock "github.com/golang/mock/gomock"
)

// MockVeth is a mock of Veth interface.
type MockVeth struct {
	ctrl     *gomock.Controller
	recorder *MockVethMockRecorder
}

// MockVethMockRecorder is the mock recorder for MockVeth.
type MockVethMockRecorder struct {
	mock *MockVeth
}

// NewMockVeth creates a new mock instance.
func NewMockVeth(ctrl *gomock.Controller) *MockVeth {
	mock := &MockVeth{ctrl: ctrl}
	mock.recorder = &MockVethMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVeth) EXPECT() *MockVethMockRecorder {
	return m.recorder
}

// Setup mocks base method.
func (m *MockVeth) Setup(arg0 string, arg1 int, arg2 string, arg3 ns.NetNS) (net.Interface, net.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(net.Interface)
	ret1, _ := ret[1].(net.Interface)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Setup indicates an expected call of Setup.
func (mr *MockVethMockRecorder) Setup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockVeth)(nil).Setup), arg0, arg1, arg2, arg3)
}
