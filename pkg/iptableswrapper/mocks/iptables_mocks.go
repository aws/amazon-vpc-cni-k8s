// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-k8s/pkg/iptableswrapper (interfaces: IPTablesIface)

// Package mock_iptableswrapper is a generated GoMock package.
package mock_iptableswrapper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPTablesIface is a mock of IPTablesIface interface.
type MockIPTablesIface struct {
	ctrl     *gomock.Controller
	recorder *MockIPTablesIfaceMockRecorder
}

// MockIPTablesIfaceMockRecorder is the mock recorder for MockIPTablesIface.
type MockIPTablesIfaceMockRecorder struct {
	mock *MockIPTablesIface
}

// NewMockIPTablesIface creates a new mock instance.
func NewMockIPTablesIface(ctrl *gomock.Controller) *MockIPTablesIface {
	mock := &MockIPTablesIface{ctrl: ctrl}
	mock.recorder = &MockIPTablesIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPTablesIface) EXPECT() *MockIPTablesIfaceMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockIPTablesIface) Append(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockIPTablesIfaceMockRecorder) Append(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIPTablesIface)(nil).Append), varargs...)
}

// AppendUnique mocks base method.
func (m *MockIPTablesIface) AppendUnique(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendUnique", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendUnique indicates an expected call of AppendUnique.
func (mr *MockIPTablesIfaceMockRecorder) AppendUnique(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUnique", reflect.TypeOf((*MockIPTablesIface)(nil).AppendUnique), varargs...)
}

// ClearChain mocks base method.
func (m *MockIPTablesIface) ClearChain(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearChain indicates an expected call of ClearChain.
func (mr *MockIPTablesIfaceMockRecorder) ClearChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearChain", reflect.TypeOf((*MockIPTablesIface)(nil).ClearChain), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIPTablesIface) Delete(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPTablesIfaceMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPTablesIface)(nil).Delete), varargs...)
}

// DeleteChain mocks base method.
func (m *MockIPTablesIface) DeleteChain(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChain indicates an expected call of DeleteChain.
func (mr *MockIPTablesIfaceMockRecorder) DeleteChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChain", reflect.TypeOf((*MockIPTablesIface)(nil).DeleteChain), arg0, arg1)
}

// Exists mocks base method.
func (m *MockIPTablesIface) Exists(arg0, arg1 string, arg2 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIPTablesIfaceMockRecorder) Exists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIPTablesIface)(nil).Exists), varargs...)
}

// HasRandomFully mocks base method.
func (m *MockIPTablesIface) HasRandomFully() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRandomFully")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRandomFully indicates an expected call of HasRandomFully.
func (mr *MockIPTablesIfaceMockRecorder) HasRandomFully() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRandomFully", reflect.TypeOf((*MockIPTablesIface)(nil).HasRandomFully))
}

// Insert mocks base method.
func (m *MockIPTablesIface) Insert(arg0, arg1 string, arg2 int, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIPTablesIfaceMockRecorder) Insert(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIPTablesIface)(nil).Insert), varargs...)
}

// List mocks base method.
func (m *MockIPTablesIface) List(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPTablesIfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPTablesIface)(nil).List), arg0, arg1)
}

// ListChains mocks base method.
func (m *MockIPTablesIface) ListChains(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChains", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChains indicates an expected call of ListChains.
func (mr *MockIPTablesIfaceMockRecorder) ListChains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChains", reflect.TypeOf((*MockIPTablesIface)(nil).ListChains), arg0)
}

// NewChain mocks base method.
func (m *MockIPTablesIface) NewChain(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewChain indicates an expected call of NewChain.
func (mr *MockIPTablesIfaceMockRecorder) NewChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChain", reflect.TypeOf((*MockIPTablesIface)(nil).NewChain), arg0, arg1)
}
