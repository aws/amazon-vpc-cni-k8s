// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/aws/amazon-vpc-cni-k8s/pkg/apis/crd/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeENIConfigs implements ENIConfigInterface
type FakeENIConfigs struct {
	Fake *FakeCrdV1alpha1
}

var eniconfigsResource = schema.GroupVersionResource{Group: "crd.k8s.amazonaws.com", Version: "v1alpha1", Resource: "eniconfigs"}

var eniconfigsKind = schema.GroupVersionKind{Group: "crd.k8s.amazonaws.com", Version: "v1alpha1", Kind: "ENIConfig"}

// Get takes name of the eNIConfig, and returns the corresponding eNIConfig object, and an error if there is any.
func (c *FakeENIConfigs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ENIConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(eniconfigsResource, name), &v1alpha1.ENIConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfig), err
}

// List takes label and field selectors, and returns the list of ENIConfigs that match those selectors.
func (c *FakeENIConfigs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ENIConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(eniconfigsResource, eniconfigsKind, opts), &v1alpha1.ENIConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ENIConfigList{ListMeta: obj.(*v1alpha1.ENIConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.ENIConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested eNIConfigs.
func (c *FakeENIConfigs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(eniconfigsResource, opts))
}

// Create takes the representation of a eNIConfig and creates it.  Returns the server's representation of the eNIConfig, and an error, if there is any.
func (c *FakeENIConfigs) Create(ctx context.Context, eNIConfig *v1alpha1.ENIConfig) (result *v1alpha1.ENIConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(eniconfigsResource, eNIConfig), &v1alpha1.ENIConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfig), err
}

// Update takes the representation of a eNIConfig and updates it. Returns the server's representation of the eNIConfig, and an error, if there is any.
func (c *FakeENIConfigs) Update(ctx context.Context, eNIConfig *v1alpha1.ENIConfig) (result *v1alpha1.ENIConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(eniconfigsResource, eNIConfig), &v1alpha1.ENIConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeENIConfigs) UpdateStatus(ctx context.Context, eNIConfig *v1alpha1.ENIConfig) (*v1alpha1.ENIConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(eniconfigsResource, "status", eNIConfig), &v1alpha1.ENIConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfig), err
}

// Delete takes name of the eNIConfig and deletes it. Returns an error if one occurs.
func (c *FakeENIConfigs) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(eniconfigsResource, name), &v1alpha1.ENIConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeENIConfigs) DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(eniconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ENIConfigList{})
	return err
}

// Patch applies the patch and returns the patched eNIConfig.
func (c *FakeENIConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ENIConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(eniconfigsResource, name, pt, data, subresources...), &v1alpha1.ENIConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ENIConfig), err
}
