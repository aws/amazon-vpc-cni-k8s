// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-cni-k8s/pkg/k8sapi (interfaces: K8SAPIs)

// Package mock_k8sapi is a generated GoMock package.
package mock_k8sapi

import (
	reflect "reflect"

	k8sapi "github.com/aws/amazon-vpc-cni-k8s/pkg/k8sapi"
	gomock "github.com/golang/mock/gomock"
)

// MockK8SAPIs is a mock of K8SAPIs interface
type MockK8SAPIs struct {
	ctrl     *gomock.Controller
	recorder *MockK8SAPIsMockRecorder
}

// MockK8SAPIsMockRecorder is the mock recorder for MockK8SAPIs
type MockK8SAPIsMockRecorder struct {
	mock *MockK8SAPIs
}

// NewMockK8SAPIs creates a new mock instance
func NewMockK8SAPIs(ctrl *gomock.Controller) *MockK8SAPIs {
	mock := &MockK8SAPIs{ctrl: ctrl}
	mock.recorder = &MockK8SAPIsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockK8SAPIs) EXPECT() *MockK8SAPIsMockRecorder {
	return m.recorder
}

// K8SGetLocalPodIPs mocks base method
func (m *MockK8SAPIs) K8SGetLocalPodIPs() ([]*k8sapi.K8SPodInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8SGetLocalPodIPs")
	ret0, _ := ret[0].([]*k8sapi.K8SPodInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// K8SGetLocalPodIPs indicates an expected call of K8SGetLocalPodIPs
func (mr *MockK8SAPIsMockRecorder) K8SGetLocalPodIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8SGetLocalPodIPs", reflect.TypeOf((*MockK8SAPIs)(nil).K8SGetLocalPodIPs))
}
