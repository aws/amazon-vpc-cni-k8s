on:
  pull_request_target:
  repository_dispatch:
    types: [ok-to-test-command]

name: Integration tests

jobs:
  # Branch-based pull request
  integration-trusted:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository
    steps:

      - name: Branch based PR checkout
        uses: actions/checkout@v2

    # <insert integration tests needing secrets>
      - run: |
          echo "Integration tests from internal branch..."
          echo "${{ github.event_name }}"
          echo "${{ github.event.pull_request.head.commit_id }}"
          echo "${{ github.event.pull_request.head.repo }}"
          echo "${{ github.event.pull_request.head.repo.full_name }}"
          echo "${{ github.repository }}"

  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  integration-fork:
    runs-on: ubuntu-latest
    if:
      github.event_name == 'repository_dispatch' #&&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request_target.head.sha, github.event.client_payload.slash_command.sha)
    steps:
      # Check out merge commit
      - name: Fork based /ok-to-test checkout
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      # <insert integration tests needing secrets>
      - run: |
          echo "Run integration tests after /ok-to-test"

      # Update check run called "integration-fork"
      - uses: actions/github-script@v1
        id: update-check-run
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
