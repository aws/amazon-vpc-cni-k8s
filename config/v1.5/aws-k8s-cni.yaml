---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-node
rules:
  - apiGroups:
      - crd.k8s.amazonaws.com
    resources:
      - "*"
      - namespaces
    verbs:
      - "*"
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs: ["list", "watch", "get"]
  - apiGroups: ["extensions"]
    resources:
      - daemonsets
    verbs: ["list", "watch"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-node
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-node
subjects:
  - kind: ServiceAccount
    name: aws-node
    namespace: kube-system

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: aws-node
  namespace: kube-system
  labels:
    k8s-app: aws-node
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      k8s-app: aws-node
  template:
    metadata:
      labels:
        k8s-app: aws-node
    spec:
      priorityClassName: system-node-critical
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "beta.kubernetes.io/os"
                    operator: In
                    values:
                      - linux
                  - key: "beta.kubernetes.io/arch"
                    operator: In
                    values:
                      - amd64
      serviceAccountName: aws-node
      hostNetwork: true
      tolerations:
        - operator: Exists
      # The AWS VPC CNI has a number of components. The first is the "CNI
      # plugin", which is built as the /app/aws-cni binary from the source code
      # in /plugins/routed-eni. This /app/aws-cni binary is executed by kubelet
      # when a container networking command is fired (e.g. when a network is
      # added or deleted from the host for a container). This binary must be
      # copied, along with an associated configuration file, to a volume that
      # is readable from the host (since kubelet will execute it). The
      # initContainer here is responsible for ensuring the /app/aws-cni and its
      # config file are in a location the kubelet can read. This setup used to
      # be hard-coded into the second primary binary, the agent
      # (/app/aws-k8s-agent) and was moved here to place all
      # initialization/setup in a more appropriate place.
      #
      # See https://github.com/aws/amazon-vpc-cni-k8s/pull/706
      initContainers:
        - name: aws-node-init
        - image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.5.3
          imagePullPolicy: Always
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
          env:
            - name: AWS_VPC_K8S_CNI_VETHPREFIX
              value: eni
            - name: AWS_VPC_K8S_CNI_MTU
              value: 9001
          command:
        - 'sh'
        - '-c'
        - 'cp /app/aws-cni /host/opt/cni/bin/;
           chmod +x /host/opt/cni/bin/aws-cni;
           cp /app/10-aws.conflist /host/etc/cni/net.d/10-aws.conflist;
           sed -i s/__VETHPREFIX__/"${AWS_VPC_K8S_CNI_VETHPREFIX:-"eni"}"/g /app/10-aws.conflist;
           sed -i s/__MTU__/"${AWS_VPC_ENI_MTU:-"9001"}"/g /app/10-aws.conflist;
           cp /app/portmap /host/opt/cni/bin/;
           chmod +x /host/opt/cni/bin/portmap;
           cp /app/aws-cni-support.sh /host/opt/cni/bin/;

           if [[ -f /host/etc/cni/net.d/aws.conf ]]; then
             rm /host/etc/cni/net.d/aws.conf
           fi;'
      containers:
        - image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.5.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 61678
              name: metrics
          name: aws-node
          #readinessProbe:
          #  exec:
          #    command: ["/app/grpc_health_probe", "-addr=:50051"]
          #  initialDelaySeconds: 25
          #livenessProbe:
          #  exec:
          #    command: ["/app/grpc_health_probe", "-addr=:50051"]
          #  initialDelaySeconds: 25
          env:
            - name: AWS_VPC_K8S_CNI_LOGLEVEL
              value: DEBUG
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              cpu: 10m
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /host/var/log
              name: log-dir
            - mountPath: /var/run/docker.sock
              name: dockersock
      volumes:
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        - name: log-dir
          hostPath:
            path: /var/log
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: eniconfigs.crd.k8s.amazonaws.com
spec:
  scope: Cluster
  group: crd.k8s.amazonaws.com
  versions:
    - name: v1alpha1
      served: true
      storage: true
  names:
    plural: eniconfigs
    singular: eniconfig
    kind: ENIConfig
